# guestbook-app/templates/db-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: guestbook-db
  labels:
    app.kubernetes.io/name: guestbook-db
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: guestbook-db
      app.kubernetes.io/instance: {{ .Release.Name }}
  
  serviceName: guestbook-db
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: guestbook-db
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: mysql
          image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
          imagePullPolicy: {{ .Values.db.image.pullPolicy }}
          ports:
            - containerPort: 3306
          
          # Variables de Entorno y Credenciales
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: DB_PASSWORD
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: DB_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: DB_NAME
          
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            - name: mysql-init-schema
              mountPath: /docker-entrypoint-initdb.d/

      volumes:
        - name: mysql-init-schema
          configMap:
            name: {{ .Values.db.schemaConfigMap }}

  # PersistentVolumeClaim (PVC) Template
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.db.persistence.size }}
